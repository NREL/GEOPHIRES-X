import math

# Generated by CodiumAI

import pytest

from geophires_x.CylindricalReservoir import CylindricalReservoir
from geophires_x.Model import Model
from geophires_x.Reservoir import heatcapacitywater, densitywater


class TestCalculate:

    #  Calculates the temperature of the rock at the inflow end of the cylindrical reservoir
    def test_calculate_temperature_inflow_end(self):
        model = Model()
        reservoir = CylindricalReservoir(model)
        reservoir.Calculate(model)
        assert reservoir.Trock.value == reservoir.Tsurf.value + (reservoir.gradient.value[0] * (reservoir.InputDepth.value * 1000.0))

    #  Calculates the initial reservoir heat content
    def test_calculate_initial_heat_content(self):
        model = Model()
        reservoir = CylindricalReservoir(model)
        reservoir.Calculate(model)
        expected_heat_content = (reservoir.RadiusOfEffectFactor.value *
                                 reservoir.resvolcalc.value*reservoir.rhorock.value*reservoir.cprock.value*
                                 (reservoir.Trock.value-model.wellbores.Tinj.value))/1E15
        assert reservoir.InitialReservoirHeatContent.value == expected_heat_content

    #  Calculates the surface area of the cylindrical reservoir
    def test_calculate_surface_area(self):
        model = Model()
        reservoir = CylindricalReservoir(model)
        reservoir.Calculate(model)
        expected_surface_area = (2.0 * math.pi * reservoir.RadiusOfEffect.value * (reservoir.Length.value * 1000.0)) +\
                                (2.0 * math.pi * (reservoir.RadiusOfEffect.value ** 2))
        assert reservoir.SurfaceArea.value == expected_surface_area

    #  Calculates the heat capacity of water
    def test_calculate_heat_capacity_water(self):
        model = Model()
        reservoir = CylindricalReservoir(model)
        reservoir.Calculate(model)
        expected_heat_capacity = heatcapacitywater(model.wellbores.Tinj.value*0.5 +
                                                  (reservoir.Trock.value*0.9+model.wellbores.Tinj.value*0.1)*0.5)
        assert reservoir.cpwater.value == expected_heat_capacity

    #  Calculates the density of water
    def test_calculate_density_water(self):
        model = Model()
        reservoir = CylindricalReservoir(model)
        reservoir.Calculate(model)
        expected_density = densitywater(model.wellbores.Tinj.value*0.5 +
                                        (reservoir.Trock.value*0.9+model.wellbores.Tinj.value*0.1)*0.5)
        assert reservoir.rhowater.value == expected_density

    #  Calculates the temperature of the rock at the outflow end of the cylindrical reservoir
    def test_calculate_temperature_outflow_end(self):
        model = Model()
        reservoir = CylindricalReservoir(model)
        reservoir.Calculate(model)
        expected_temperature = reservoir.Tsurf.value + (reservoir.gradient.value[0] * (reservoir.depth.value * 1000.0))
        assert reservoir.Tresoutput.value[-1] == expected_temperature

    #  Calculates the initial reservoir heat content with minimum values
    def test_calculate_initial_heat_content_min_values(self):
        model = Model()
        reservoir = CylindricalReservoir(model)
        reservoir.RadiusOfEffectFactor.value = 0.0
        reservoir.resvolcalc.value = 0.0
        reservoir.rhorock.value = 0.0
        reservoir.cprock.value = 0.0
        reservoir.Trock.value = 0.0
        model.wellbores.Tinj.value = 0.0
        reservoir.Calculate(model)
        assert reservoir.InitialReservoirHeatContent.value == 0.0

    #  Calculates the initial reservoir heat content with maximum values
    def test_calculate_initial_heat_content_max_values(self):
        model = Model()
        reservoir = CylindricalReservoir(model)
        reservoir.RadiusOfEffectFactor.value = 10.0
        reservoir.resvolcalc.value = 100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
